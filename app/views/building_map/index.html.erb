<div class="accordion mb-2 accordion-flush" id="routingInput">
	<div class="accordion-item">
		<h2 class="accordion-header" id="headingOne">
			<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
				data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
				<i class="fas fa-directions directions-icon"></i>
			</button>
		</h2>
		<div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne"
			data-bs-parent="#routingInput">
			<div class="accordion-body">
				<form class="row gy-2 gx-3 align-items-center" autocomplete="off">
					<div class="col-auto">
						<div class="input-group">
							<div class="input-group-text"><i class="fas fa-map-marker-alt route-start-icon"></i></div>
							<input name='start' type="text" class="form-control" list="startOptions" id="start_input"
								placeholder="From" onchange="request_location()">
						</div>
					</div>
					<div class="col-auto">
						<div class="input-group">
							<div class="input-group-text"><i class="fas fa-map-marker-alt route-end-icon"></i></div>
							<input name='dest' type="text" class="form-control" list="destOptions" id="dest_input"
								placeholder="To">
						</div>
					</div>
					<input name='your_location' type='hidden' id='your_location' >
					<div class="col-auto">
						<button type="submit" formaction="/building_map" class="btn btn-primary" onclick="request_location()">Go</button>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<datalist id="startOptions">
	<option>Your location</option>
	<%= Places::DESTINATIONS.each do |dest, coords| %>
		<option>
			<%= "#{dest}" %>
		</option>
		<% end %>
</datalist>
<datalist id="destOptions">
	<%= Places::DESTINATIONS.each do |dest, coords| %>
		<option>
			<%= "#{dest}" %>
		</option>
		<% end %>
</datalist>

<%= map(
    center: {
        # HPI coordinates
        latlng: RoutingHelper.center(@start),
        zoom: 17,
    },
    polygons: BuildingMapHelper.leaflet_polygons(),
    polylines: BuildingMapHelper.leaflet_polylines(@route),
    markers: BuildingMapHelper.leaflet_markers(@route))
%>

<script>
    

	function validate_start_input() {
		const start_input = document.getElementById("start_input");
		const startOptions = document.getElementById("startOptions").options;
		let valid_start = false;
		for (option of startOptions) {	
			if (option.value == start_input.value) valid_start = true;
		}
		return valid_start;	
	}

	function validate_dest_input() {
		const dest_input = document.getElementById("dest_input");
		const destOptions = document.getElementById("destOptions").options;
		let valid_dest = false;
		for (option of destOptions) {	
			if (option.value == dest_input.value) valid_dest = true;
		}
		return valid_dest;
	}

	const start_input_field = document.getElementById("start_input");
	start_input_field.setCustomValidity("Please select a valid starting place.");
	start_input_field.addEventListener("change", () => {
		if (validate_start_input()) {
			start_input_field.setCustomValidity("");
		} else {
			start_input_field.setCustomValidity("Please select a valid starting place.");
		}
	});

	const dest_input_field = document.getElementById("dest_input");
	dest_input_field.setCustomValidity("Please select a valid destination place.");
	dest_input_field.addEventListener("change", () => {
		if (validate_dest_input()) {
			dest_input_field.setCustomValidity("");
		} else {
			dest_input_field.setCustomValidity("Please select a valid destination place.");
		}
	});

	function request_location() {
        const selection = document.getElementById("start_input");
		if (selection.value != "Your location") return;
		navigator.geolocation.getCurrentPosition(
			(pos) => {
				currentLocation = String(pos.coords.latitude) + "," + String(pos.coords.longitude);
				start_input_field.setCustomValidity("");
				document.getElementById("your_location").value = currentLocation;
			},  
			(error) => {
				console.warn(`ERROR(${error.code}): ${error.message}`);
				switch(error.code) {
					case GeolocationPositionError.TIMEOUT:
						start_input_field.setCustomValidity("Your browser could not determine your position. Please choose a different starting place.")
						break;
					case GeolocationPositionError.PERMISSION_DENIED:
						start_input_field.setCustomValidity("You have to grant your browser the permission to access your location if you want to use this feature.")
						break;
					case GeolocationPositionError.POSITION_UNAVAILABLE:
						start_input_field.setCustomValidity("Your browser could not determine your position. Please choose a different starting place.")
						break;
				}
			}
		);
    }
</script>
