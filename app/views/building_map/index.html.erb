<%=
  map(
    center: {
        # HPI coordinates if no center is set
        latlng: !@target.nil? ? @target.split(",") : [52.39339, 13.13208],
        zoom: 18,
    },
    polygons: BuildingMapHelper.leaflet_polygons(),
    polylines: BuildingMapHelper.leaflet_polylines(@route),
    markers: BuildingMapHelper.leaflet_markers(@route, @target))
%>
<style>
.indoor-label{
  background: rgba(255, 255, 255, 0);
  border:0;
  border-radius:0px;
  box-shadow: 0 0px 0px;
}
</style>
<script>
  function addIndoorLabel(feature, layer) {
    layer.bindTooltip(
      feature.properties.name,
      {
          permanent: true,
          direction:'center',
          className: 'indoor-label',
      }
    );
  }

  function loadGeoJsonFile(filename) {
    fetch(filename)
    .then(response => response.json())
    .then(geojsonFeatureCollection => {
      // Manually add indoor labels to map 
      const rooms = L.geoJSON(geojsonFeatureCollection, { onEachFeature: addIndoorLabel }).addTo(map);
      rooms.eachLayer((layer)=>{
        layer.getTooltip().setLatLng(layer.getBounds().getCenter());
      });
      recalculateTooltipVisibility()
    })
  }

  loadGeoJsonFile('assets/lecture-hall-building.geojson')
  function recalculateTooltipVisibility() {
    const zoomLevel = map.getZoom()
    map.eachLayer(layer => {
      if (layer.getTooltip()) {
        if (zoomLevel == 19 /* nearest zoom */) {
          layer.openTooltip(layer.getBounds().getCenter())
        } else {
          layer.closeTooltip()
        }
      }
    })
  }
  map.on('zoomend', recalculateTooltipVisibility);
</script>
